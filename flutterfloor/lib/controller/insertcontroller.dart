import 'package:flutter/material.dart';
import 'package:flutterfloor/dao/employeedao.dart';
import 'package:flutterfloor/database/app_database.dart';
import 'package:flutterfloor/entity/employee_entity.dart';
import 'package:get/get.dart';

class Insertcontroller extends GetxController {
  final AppDatabase database;

  Insertcontroller({required this.database});

  // You can define Rx variables for the employee fields
  RxString uid = ''.obs;
  RxString name = ''.obs;
  RxString email = ''.obs;
  RxString phone = ''.obs;
  RxString password = ''.obs;

  var isFormValid = true.obs; // To track form validity

  // Validation for the employee fields
  bool validateForm() {
    isFormValid.value =
        uid.value.isNotEmpty && name.value.isNotEmpty && email.value.isNotEmpty && phone.value.isNotEmpty && password.value.isNotEmpty;
    return isFormValid.value;
  }

  // Insert the employee into the database
  Future<void> insertEmployee() async {
    if (validateForm()) {
      final employee = EmployeeEntity(
        // ID is auto-generated by Floor, so no need to pass it
        name: name.value,
        email: email.value,
        phone: phone.value,
        password: password.value,
        uid: uid.value,
      );

      try {
        // Insert employee into the database using the DAO
        await database.employeeDao.insertEmployee(employee);
        Get.snackbar('Success', 'Employee added successfully');
      } catch (e) {
        Get.snackbar('Error', 'Failed to add employee: $e');
      }
    } else {
      Get.snackbar('Validation Error', 'Please fill all the fields correctly');
    }
  }

  // Function to show the dialog for adding a new employee
  void showAddEmployeeDialog(BuildContext context, EmployeeDao dao) {
    final TextEditingController nameController = TextEditingController();
    final TextEditingController emailController = TextEditingController();
    final TextEditingController phoneController = TextEditingController();
    final TextEditingController passwordController = TextEditingController();
    final TextEditingController uidController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: AlertDialog(
            title: Text('Add New Employee'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                TextField(
                  controller: uidController,
                  decoration: InputDecoration(labelText: 'User Name'),
                ),
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(labelText: 'Name'),
                ),
                TextField(
                  controller: emailController,
                  decoration: InputDecoration(labelText: 'Email'),
                ),
                TextField(
                  controller: phoneController,
                  decoration: InputDecoration(labelText: 'Phone'),
                ),
                TextField(
                  controller: passwordController,
                  decoration: InputDecoration(labelText: 'Password'),
                ),
              ],
            ),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cancel'),
              ),
              TextButton(
                onPressed: () async {
                  // Validate form data before adding employee
                  if (nameController.text.isNotEmpty &&
                      emailController.text.isNotEmpty &&
                      phoneController.text.isNotEmpty &&
                      passwordController.text.isNotEmpty &&
                      uidController.text.isNotEmpty) {
                    var employee = EmployeeEntity(
                      // ID will be auto-generated by Floor
                      name: nameController.text,
                      email: emailController.text,
                      phone: phoneController.text,
                      password: passwordController.text,
                      uid: uidController.text,
                    );
                    await dao.insertEmployee(employee);
                    Get.snackbar('Success', 'Employee added');
                    Navigator.of(context).pop(); // Close the dialog
                  } else {
                    Get.snackbar('Error', 'Please fill in all fields');
                  }
                },
                child: Text('Add Employee'),
              ),
            ],
          ),
        );
      },
    );
  }
}
